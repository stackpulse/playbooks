apiVersion: stackpulse.io/v1
kind: Playbook
metadata:
  name: create-incident-war-room
parameters:
  - name: notificationChannel
    type: var
    description: "The name of the channel you would like to notify about the incident (without a #)."
  - name: invitees
    type: var
    description: "The emails of the users that will be invited to the channel (by default, only the incident reporter)."
    default: '{{ $.event.Reporter }}'
  - name: reporter
    type: var
    description: The received event reporter.
    default: '{{ $.event.Reporter }}'  
  - name: eventID
    type: var
    description: The received event ID.
    default: '{{ $.event.ID }}'
  - name: eventName
    type: var
    description: The received event name.
    default: '{{ $.event.Name }}'
  - name: eventDescription
    type: var
    description: The received event description.
    default: '{{ $.event.Description }}'
  - name: severity
    type: var
    description: The received event severity.
    default: '{{ $.event.Severity }}'  
  - name: warRoomChannelName
    type: var
    description: The War Room Slack channel name to be attached to the incident.
  - name: zoomIntegrationName
    type: integration
    description: Zoom integration.
    options:
      integration_type: zoom
  - name: slackOnCaller
    type: var
    description: The Slack recepient on caller to page.
    default: '{{ $.event.Reporter }}'     
  - name: pagerDutyOnCaller
    type: var
    description: The PagerDuty on caller to page.
    default: '{{ $.event.Reporter }}'     
  - name: pagerDutyToken
    type: secret
    description: PagerDuty API Token.
  - name: pagerDutyService
    type: var
    description: The name of the PagerDuty service you would wish to page the on call for.
  - name: slackIntegrationName
    type: integration
    description: Slack integration.
    options:
      integration_type: slack
steps:
  # Create Zoom meeting
  - name: us-docker.pkg.dev/stackpulse/public/zoom/meeting/create
    id: zoom_create_meeting
    ignoreFailure: true
    env:
      HOST_EMAIL: "{{ $.params.reporter }}"
      MEETING_TOPIC: "StackPulse War Room for Incident {{ $.params.eventName }} ({{ $.params.eventID }})"
    envFrom:
      integrationRef: "{{ $.params.zoomIntegrationName }}"

  # Creates war-room channel
  - name: us-docker.pkg.dev/stackpulse/public/slack/channel/create
    id: slack_create_war_room_channel
    env:
      CHANNEL_NAME: "{{ $.params.eventID }} {{ $.params.eventName }}"
      PURPOSE: '{{ $.params.eventDescription }}'
      TOPIC: "StackPulse War Room Channel for Incident {{ $.params.eventName }} ({{ $.params.eventID }})\n {{- if $.join_url }} Zoom meeting link {{ $.join_url }} {{ end }}"
      USERS: '{{ $.params.invitees }}'
    envFrom:
      integrationRef: '{{ $.params.slackIntegrationName }}'

  # Attach war-room channel to StackPulse incident
  - name: us-docker.pkg.dev/stackpulse/public/stackpulse/incident/update
    id: attach_war_room_channel_to_incident
    env:
      INCIDENT_ID: '{{ $.params.eventID }}'
      SLACK_WAR_ROOM_NAME: '{{ $.channel_name }}'
    envFrom:
      integrationRef: '{{ $.params.slackIntegrationName }}'

  # Send message in notification channel about creation of war-room
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/dynamic
    id: slack_alert_notification_channel
    env:
      SP_REDIRECT_URL: https://app.stackpulse.io/execution/{{ $.execution.id }}
      MESSAGE_TEXT: "@channel, *StackPulse created an incident*\nhttps://app.stackpulse.io/incident/{{ $.params.eventID }}\n*A War Room was created*\n#{{ $.params.warRoomChannelName }} {{- if $.join_url }} \n*A Zoom Meeting was created*\n{{ $.join_url }} {{ end }}"
      RECIPIENTS: "#{{ $.params.notificationChannel }}"
    envFrom:
      integrationRef: '{{ $.params.slackIntegrationName }}'

  # Send message in war-room with incident details
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/dynamic
    id: slack_alert_war_room_channel
    env:
      SP_REDIRECT_URL: https://app.stackpulse.io/execution/{{ $.execution.id }}
      MESSAGE_TEXT: "@channel, *StackPulse created an incident*\nhttps://app.stackpulse.io/incident/{{ $.params.eventID }}\n*A War Room was created*\n#{{ $.params.warRoomChannelName }} {{- if $.join_url }} \n*A Zoom Meeting was created*\n{{ $.join_url }} {{ end }}"
      RECIPIENTS: "#{{ $.params.warRoomChannelName }}"
    envFrom:
      integrationRef: '{{ $.params.slackIntegrationName }}'

  # Interactively ask the reporter whether to page the on caller on PagerDuty
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/interactive
    id: slack_ask_on_caller_paging
    env:
      DEFAULT_RESPONSE: "No"
      QUESTION: "Would you like to page the on-caller?"
      RECIPIENTS: '{{ $.params.slackOnCaller }}'
      RESPONSES: "Yes,No"
      TIMEOUT: 2m
    envFrom:
      integrationRef: '{{ $.params.slackIntegrationName }}'

  # Create incident on PagerDuty
  - name: us-docker.pkg.dev/stackpulse/public/pagerduty/incident/create
    id: pagerduty_incident_create
    when: '{{ ieq $.slack_response "Yes" }}'
    env:
      PAGERDUTY_TOKEN: '{{ secret $.params.pagerDutyToken }}'
      PAGERDUTY_USER_EMAIL: '{{ $.params.pagerDutyOnCaller }}'
      SERVICE_NAME: '{{ $.params.pagerDutyService }}'
      TITLE: '{{ $.params.eventName | kebabcase }}-{{ $.params.eventID | kebabcase }}'
      URGENCY: '{{ if ieq $.params.severity "normal" }}low{{ else }}high{{ end }}'
