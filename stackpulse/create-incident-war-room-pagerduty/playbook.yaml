apiVersion: stackpulse.io/v1
kind: Playbook
metadata:
  name: create-incident-war-room
parameters:
  - name: notificationChannel
    type: var
    description: "The name of the channel you would like to notify about the incident (without a #)."
  - name: invitees
    type: var
    description: "The emails of the users that will be invited to the channel (by default, only the incident reporter)."
    default: "{{ $.event.Reporter }}"
  - name: reporter
    type: var
    description: "The email of the reporter user that will be asked on Slack whether to perform the paging."
    default: "{{ $.event.Reporter }}"
  - name: incidentID
    type: var
    description: "The StackPulse incident ID that triggered this playbook (e.g INC-1234)."
    default: "{{ $.event.ID }}"
  - name: incidentName
    type: var
    description: "The StackPulse incident name that triggered this playbook."
    default: "{{ $.event.Name }}"
  - name: incidentDescription
    type: var
    description: "The StackPulse incident description which will be used for the Slack War Room topic."
    default: "{{ $.event.Description }}"
  - name: severity
    type: var
    description: "The StackPulse incident severity, must be one of ['normal', 'high', 'critical']."
    default: "{{ $.event.Severity }}"
  - name: warRoomChannelName
    type: var
    description: "The War Room Slack channel name to be attached to the incident."
  - name: zoomIntegrationName
    type: integration
    description: "Zoom integration."
    options:
      integration_type: zoom
  - name: pagerDutyOnCaller
    type: var
    description: "The PagerDuty on caller to page."
    default: "{{ $.event.Reporter }}"     
  - name: pagerDutyToken
    type: secret
    description: "PagerDuty API Token."
  - name: pagerDutyService
    type: var
    description: "The name of the PagerDuty service you would wish to page the on call for."
  - name: slackIntegrationName
    type: integration
    description: "Slack integration."
    options:
      integration_type: slack
steps:
  # Create Zoom meeting
  - name: us-docker.pkg.dev/stackpulse/public/zoom/meeting/create
    id: zoom_create_meeting
    ignoreFailure: true
    env:
      HOST_EMAIL: "{{ $.params.reporter }}"
      MEETING_TOPIC: "StackPulse War Room for Incident {{ $.params.incidentName }} ({{ $.params.incidentID }})"
    envFrom:
      integrationRef: "{{ $.params.zoomIntegrationName }}"

  # Creates war-room channel
  - name: us-docker.pkg.dev/stackpulse/public/slack/channel/create
    id: slack_create_war_room_channel
    env:
      CHANNEL_NAME: "{{ $.params.incidentID }} {{ $.params.incidentName }}"
      PURPOSE: "{{ $.params.incidentDescription }}"
      TOPIC: "StackPulse War Room Channel for Incident {{ $.params.incidentName }} ({{ $.params.incidentID }})\n {{- if $.join_url }} Zoom meeting link {{ $.join_url }} {{ end }}"
      USERS: "{{ $.params.invitees }}"
    envFrom:
      integrationRef: "{{ $.params.slackIntegrationName }}"

  # Attach war-room channel to StackPulse incident
  - name: us-docker.pkg.dev/stackpulse/public/stackpulse/incident/update
    id: attach_war_room_channel_to_incident
    env:
      INCIDENT_ID: "{{ $.params.incidentID }}"
      SLACK_WAR_ROOM_NAME: "{{ $.channel_name }}"
    envFrom:
      integrationRef: "{{ $.params.slackIntegrationName }}"

  # Send message in notification channel about creation of war-room
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/dynamic
    id: slack_alert_notification_channel
    env:
      SP_REDIRECT_URL: https://app.stackpulse.io/execution/{{ $.execution.id }}
      MESSAGE_TEXT: "@channel, *StackPulse created an incident*\nhttps://app.stackpulse.io/incident/{{ $.params.incidentID }}\n*A War Room was created*\n#{{ $.params.warRoomChannelName }} {{- if $.join_url }} \n*A Zoom Meeting was created*\n{{ $.join_url }} {{ end }}"
      RECIPIENTS: "#{{ $.params.notificationChannel }}"
    envFrom:
      integrationRef: "{{ $.params.slackIntegrationName }}"

  # Send message in war-room with incident details
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/dynamic
    id: slack_alert_war_room_channel
    env:
      SP_REDIRECT_URL: https://app.stackpulse.io/execution/{{ $.execution.id }}
      MESSAGE_TEXT: "@channel, *StackPulse created an incident*\nhttps://app.stackpulse.io/incident/{{ $.params.incidentID }}\n*A War Room was created*\n#{{ $.params.warRoomChannelName }} {{- if $.join_url }} \n*A Zoom Meeting was created*\n{{ $.join_url }} {{ end }}"
      RECIPIENTS: "#{{ $.params.warRoomChannelName }}"
    envFrom:
      integrationRef: "{{ $.params.slackIntegrationName }}"

  # Interactively ask the reporter whether to page the on caller on PagerDuty
  - name: us-docker.pkg.dev/stackpulse/public/slack/message/interactive
    id: slack_ask_on_caller_paging
    env:
      DEFAULT_RESPONSE: "No"
      QUESTION: "Would you like to page the on-caller?"
      RECIPIENTS: "{{ $.params.reporter }}"
      RESPONSES: "Yes,No"
      TIMEOUT: "2m"
    envFrom:
      integrationRef: "{{ $.params.slackIntegrationName }}"

  # Create incident on PagerDuty
  - name: us-docker.pkg.dev/stackpulse/public/pagerduty/incident/create
    id: pagerduty_incident_create
    when: '{{ ieq $.slack_response "Yes" }}'
    env:
      PAGERDUTY_TOKEN: "{{ secret $.params.pagerDutyToken }}"
      PAGERDUTY_USER_EMAIL: "{{ $.params.pagerDutyOnCaller }}"
      SERVICE_NAME: "{{ $.params.pagerDutyService }}"
      TITLE: "{{ $.params.incidentName | kebabcase }}-{{ $.params.incidentID | kebabcase }}"
      URGENCY: '{{ if ieq $.params.severity "normal" }}low{{ else }}high{{ end }}'
